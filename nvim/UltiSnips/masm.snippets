snippet tiny "template" b
.model tiny
.486

.data
$2

.code
.startup
	$1
.exit
end
endsnippet

snippet small "template" b
.model small
.486
.stack

.data
$2

.code
.startup
	$1
.exit
end
endsnippet

snippet disnl "new line characters for diplay" b
disnl db 0dh,0ah,'$'
endsnippet

snippet nl "new line characters for diplay"
0dh,0ah
endsnippet

# DOS - Display

snippet dc "display character" b
mov dl, ${1:char}
mov ah,02h
int 21h
endsnippet

snippet ds "display string" b
; string present at get_locn
lea dx, ${1:get_locn}
mov ah,09h
int 21h
endsnippet

# Input
snippet ic "input character with echo" b
mov ah,01
int 21h
mov ${1:store_locn},al ; char stored in al register
endsnippet

snippet ice "input character without echo" b
mov ah,08 ; can use 07 also
int 21h
mov ${1:store_locn},al ; char stored in al register
endsnippet

snippet is "input string with echo" b
lea dx, ${1:ipSize_locn}s
mov ah,0ah
int 21h
; put this in .data
$1s db ${2:num}
$1a db ?
$1d db $2 dup(?)
endsnippet

snippet ise "input string without echo" b
; store_locn ipSize dup(?)
mov cx, ${1:ipSize}
lea di, ${2:store_locn}
${3:flag}: mov ah,08h
	int 21h
	stosb
	loop $3
endsnippet

snippet cmpstr "compare 2 strings" b
mov cl, ${1:size}
mov ch, 0
lea si, ${2:string1}
lea di, ${3:string2}
repe cmpsb
jnz ${4:flag} ; jump to $4 if srings not equal
; if equal write below
endsnippet

# File Operations
snippet cf "create file" b
mov ah,3ch
lea dx,${1:fname_locn}
mov cl,20h
int 21h
; mov handle,ax
; in data
; $1 db "${2:filename.txt}",0
; handle dw ?
endsnippet

snippet of "open file" b
; permission - 0=read, 01h=write, 02h=read&write
mov ah,3dh
lea dx,${1:fname_locn}
mov al,${2:permission}
int 21h
mov ${3:handle},ax
endsnippet

snippet rf "read file" b
mov ah,3Fh
mov bx,${1:handle}
mov cx,${2:noOfBytesToRead}
lea dx,${3:addressOfData}
int 21h
; in data
; $3 db $2 dup(?)
endsnippet

snippet wf "write to file" b
mov ah,40h
mov bx,${1:handle}
lea dx,${2:addressOfData}
mov cx,${3:noOfBytesToWrite}
int 21h
; in data
; $2 db "somedata"
endsnippet

snippet clf "close file" b
mov ah,3eh
int 21h
endsnippet

snippet mfp "move file pointer" b
; movementCode: 0=beg, 1=curr, 2=end
mov ah,42h
mov al,${1:movementCode}
mov bx,${2:handle}
mov dx, ${4:lowerWord}
mov cx, ${3:upperWord}
; cx is usually 0 or -1
int 21h
endsnippet

# BIOS Interrupts - Display

snippet bf "blocking function to hold display" b
; hold display until % is pressed
mov ah,07h
x1: int 21h
	cmp al,'%'
	jnz x1

; restore display after exit
mov		ah,00
mov		al,curr
int		10h
endsnippet

snippet gm "get display mode" b
mov	ah,0fh ; get the video mode
int	10h
mov	curr,al	; save the current mode in location curr
; put this in .data
curr db	?
endsnippet

# 00h - text mode. 40x25. 16 colours. 8 pages.
# 03h - text mode. 80x25. 16 colours. 8 pages.
# 12h - graphical mode. 80x25. 256 colours. 720x400 pixels. 1 page.
snippet sm "set display mode" b
mov	ah,00 ; set mode
mov	al,${1:mode_num}
int	10h
endsnippet

snippet sc "set cursor postion" b
; move cursor to col $1, row $2
mov ah,02H               
mov dl,${1:col}
mov dh,${2:row}
mov bh,0 ; page no., usually 0
int 10h
endsnippet

# Get cursor size and Set cursor size not written

snippet rc "read character at cursor position" b
mov ah,08h
mov bh,0 ; page no.
; Output: AH = attribute. AL = character.
int 10h
endsnippet

snippet wc "write character at cursor position" b
mov	ah,09h ; function to display character
mov	al,${1:'m'} ; character to be displayed
mov	cx,${2:num}   ; number of chars to be displayed
mov	bh,0   ; page 0 is where the display takes place
mov	bl,${3:attribute}b
int 10h
endsnippet
# Attribute doc
# bg colour
#     |   intensity of foreground colour (0-low,1-high)
#   |---| |
# 7 6 5 4 3 2 1 0
# |         |---|
# |           |
# |   foreground colour
# blinking if 1

# colour code - colour (high intensity colour)
# 000 - black (gray)
# 001 - blue (bright blue)
# 010 - green (bright green)
# 011 - cyan (bright cyan) 
# 100 - red   (bright red)
# 101 - magenta (bright magenta)
# 110 - brown (yellow)
# 111 - white (bright white)

# Graphics disply
snippet sgm "set graphics video mode" b
; set graphics video mode
mov al,12h
mov ah,0
int 10h
endsnippet

snippet dp "fill a pixel" b
mov al,${1:colour}b
mov cx,${2:col}
mov dx,${3:row}
mov ah,0ch
int 10h
endsnippet

snippet drect "draw a rectangle"
mov cx,${1:start_col}
mov dx,${2:start_row}
mov al,${3:colour}b
mov ah,0ch

${6:flag}: int 10h

inc cx
cmp cx,${4:end_col}
jnz $6

mov cx,$1
inc dx
cmp dx,${5:end_row}
jnz $6
endsnippet

# Notes - valid instructions

# lea reg, label 
# mov reg, label (moves content at label)
# mov reg, [label] (same as above)
# mov label, reg (moves content to labels locn)
# mov [label], reg (same as above)
# inc byte ptr [label]
# inc byte ptr label (same as above)
# dec byte ptr [label] (affects flag so can be used for jmp)
# dec byte ptr label (same as above)

# (col,row)
# width X height
